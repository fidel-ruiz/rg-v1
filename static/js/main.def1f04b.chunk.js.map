{"version":3,"sources":["components/Photo.js","components/Gallery.js","helpers.js","App.js","serviceWorker.js","index.js"],"names":["Photo","image","handleRemove","className","small","src","medium","hideDownload","data-uuid","uuid","onClick","xmlns","width","height","viewBox","fill","stroke","strokeWidth","strokeLinecap","strokeLinejoin","points","d","x1","y1","x2","y2","Gallery","images","map","index","key","serialize","arr","localStorage","setItem","JSON","stringify","deserialize","getItem","parse","App","useState","setImages","useEffect","upload","files","i","file","reader","FileReader","readAsDataURL","addEventListener","push","save","dt","Date","getTime","replace","c","r","Math","random","floor","toString","UUID","result","length","href","id","document","getElementById","click","type","name","multiple","accept","style","display","onChange","e","target","filter","val","remove","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.def1f04b.chunk.js","sourcesContent":["import React from 'react';\nimport ModalImage from 'react-modal-image';\n\nfunction Photo({ image, handleRemove }) {\n  const handleClick = () => {\n    handleRemove(image.uuid);\n  };\n  return (\n    <div className=\"image-item\">\n      <ModalImage small={image.src} medium={image.src} hideDownload={true} />\n      <div className=\"top-right\">\n        <button\n          className=\"delete-image\"\n          data-uuid={image.uuid}\n          onClick={handleClick}\n        >\n          <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            width=\"24\"\n            height=\"24\"\n            viewBox=\"0 0 24 24\"\n            fill=\"none\"\n            stroke=\"currentColor\"\n            strokeWidth=\"2\"\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n            className=\"feather feather-trash-2\"\n          >\n            <polyline points=\"3 6 5 6 21 6\"></polyline>\n            <path d=\"M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2\"></path>\n            <line x1=\"10\" y1=\"11\" x2=\"10\" y2=\"17\"></line>\n            <line x1=\"14\" y1=\"11\" x2=\"14\" y2=\"17\"></line>\n          </svg>\n        </button>\n      </div>\n    </div>\n  );\n}\n\nexport default Photo;\n","import React from 'react';\nimport Photo from './Photo';\n\nfunction Gallery({ images, handleRemove }) {\n  return (\n    <>\n      <div className=\"image-grid\">\n        {images.map((image, index) => (\n          <Photo image={image} handleRemove={handleRemove} key={index} />\n        ))}\n      </div>\n    </>\n  );\n}\n\nexport default Gallery;\n","/**\n * @method save\n * @description store the image on localStorage\n * @param {string} uuid image key reference\n * @param {string} src data:image generated\n */\nexport function save(uuid, src) {\n  const arr = deserialize();\n  arr.push({ uuid, src });\n  serialize(arr);\n}\n\n/**\n * @method remove\n * @description remove an image from the localStorage\n * @param {string} uuid image key reference\n */\nexport function remove(uuid) {\n  let arr = deserialize();\n  arr = arr.filter(val => {\n    return val.uuid !== uuid;\n  });\n\n  serialize(arr);\n}\n/**\n * @method serialize\n * @description serialize the images map and store in locaStorage\n */\nexport function serialize(arr) {\n  localStorage.setItem('images', JSON.stringify(arr));\n}\n\n/**\n * @method deserialize\n * @description deserialize the images stored map\n */\nexport function deserialize() {\n  if (localStorage.getItem('images') !== null) {\n    return JSON.parse(localStorage.getItem('images'));\n  }\n  return [];\n}\n\n/**\n * @method UUID\n * @description Generates UUIDs\n */\nexport function UUID() {\n  let dt = new Date().getTime();\n  const uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(\n    c,\n  ) {\n    const r = (dt + Math.random() * 16) % 16 | 0;\n    dt = Math.floor(dt / 16);\n    return (c === 'x' ? r : (r & 0x3) | 0x8).toString(16);\n  });\n  return uuid;\n}\n","import React, { useState, useEffect } from 'react';\nimport Gallery from './components/Gallery';\n\nimport './App.css';\nimport { deserialize, save, remove, UUID } from './helpers.js';\n\nfunction App() {\n  const [images, setImages] = useState([]);\n\n  useEffect(() => {\n    setImages(deserialize());\n  }, []);\n\n  const upload = files => {\n    for (let i = 0; i < files.length; i++) {\n      const file = files[i];\n      const reader = new FileReader();\n      reader.readAsDataURL(file);\n\n      reader.addEventListener(\n        'load',\n        function() {\n          let uuid = UUID();\n          save(uuid, reader.result);\n          setImages(deserialize());\n        },\n        false,\n      );\n    }\n  };\n\n  const openFileSelect = () => {\n    const fileElem = document.getElementById('file-upload');\n    fileElem.click();\n  };\n\n  const handleRemove = uuid => {\n    remove(uuid);\n    setImages(deserialize());\n  };\n\n  return (\n    <div className=\"container\">\n      <header className=\"App-header\">\n        <div className=\"upload-btn-wrapper\">\n          <button href=\"#\" id=\"upload\" className=\"btn\" onClick={openFileSelect}>\n            Upload Images\n          </button>\n          <input\n            type=\"file\"\n            name=\"file-upload\"\n            id=\"file-upload\"\n            multiple\n            accept=\"image/*\"\n            style={{ display: 'none' }}\n            onChange={e => upload(e.target.files)}\n          />\n        </div>\n      </header>\n      <Gallery images={images} handleRemove={handleRemove} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}